>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(1, 2)
3
>>> add_integer(100, -2)
98
>>> add_integer(2)
100
>>> add_integer(100.3, -2)
98
>>> add_integer(4, "School")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/hope/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 7, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
>>> add_integer(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/hope/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 5, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(True, False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/hope/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 14, in add_integer
    raise TypeError("a must be an integer")
TypeError: a must be an integer
>>> add_integer(0, False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/hope/alx-higher_level_programming/0x07-python-test_driven_development/0-add_integer.py", line 16, in add_integer
    raise TypeError("b must be an integer")
TypeError: b must be an integer
